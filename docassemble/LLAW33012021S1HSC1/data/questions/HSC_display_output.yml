---
include:
  - HSC_get_qualifying_services.yml
---
# The template used for final display of services
template: x[i]['display_service']
content: |
  idk it would look like something
  ${ x[i].item('phone') }
---
template: service['Display']
content: |
  ${ service['Service Name'] } 
  ${ service['Council'] }
---
template: something
subject: |
  sdfds
content: | 
  howdy
---
objects:
  - selected_services_test_collect: DAList.using(auto_gather=True, there_are_any=False, minimum_number=HSCqualifying_services.number())
  - service_names: DAList.using(auto_gather = False)
  - service_names_by_category: DAList.using(auto_gather=False)
---
code: |
  for key in HSCqualifying_services.keys():
    template_var = HSCqualifying_services.get(key)
---
code: |
  HSCtemplates = []
  # for each service, add it to the templates list in the template form
  for category in HSCqualifying_services.keys():
    for service in HSCqualifying_services[category]:
      HSCtemplates.append(service['Display'])
---
question: here the services
subquestion: |
  blahblah
  
fields:
  - note: |
      ${ something }
  - no label: selected_services_test
    datatype: checkboxes
    code: |
      template_var[i]['Service Name']
      #HSCqualifying_services.keys()[i]
      
      
---
code: |
  for category in HSCqualifying_services.keys():
    selected_services_test_collect.appendObject(DADict)
  #selected_services_test_collect.there_is_another = False
  #selected_services_test_collect.gathered = True
  test_var_2 = 0
---
code: |
  selected_services_test_collect[i].there_are_any = False
---
# testing using list collect
question: Here they be again
subquestion: |
  blah blah blah
  
fields:
  - no label: selected_services_test_collect[i] # a DAList of dictionaries of services mapping to boolean values
    datatype: checkboxes
    code: |
      #HSCqualifying_services.keys()
      #HSCqualifying_services.get(HSCqualifying_services.keys()[i])
      #service_names
      service_names_by_category[i]
    none of the above: False
    required: False
list collect:
  enable: not selected_services_test_collect.has_been_gathered()
  #i < HSCqualifying_services.number()
  #not selected_services_test_collect.has_been_gathered()
  is final: False
  allow append: False
  allow delete: False
  label: |
    ###${ HSCqualifying_services.keys()[i] }
---
# WORKS!!!
# well kinda
# this allows us to display each service name as a checkbox, but it still only does it for a single category, ie i never increments??
code: |
  category_list = HSCqualifying_services.keys()
  current_category = category_list[i]
  services = HSCqualifying_services.get(current_category) # a list of dicts representing the services
  
  # go through each service in the list, and append each of the names to the new list
  for service in services:
    service_names.append(service['Service Name'])
  service_names.gathered = True
  #service_names = services#['Service Name']
---
# we can instead try to make it a list of lists, ie a list containing the list of service names for each category, and then call service_names_by_category[i] in the checkboxes
# maybe this will make it so it prints the checkboxes for each category??
code: |
  category_list = HSCqualifying_services.keys()
  service_names_temp = []
  for current_category in category_list:
    services = HSCqualifying_services.get(current_category) # the list of dicts representing the services of the current category
    
    # then, iterate through each service in the current list, and append each of the names to a new list
    #service_names.gathered = False
    #service_names.clear()
    service_names_temp = []
    for service in services:
      service_names_temp.append(service['Service Name'])
    #service_names.gathered = True
    
    service_names_by_category.append(service_names_temp)
    
  service_names_by_category.gathered = True
  service_names_by_category[i] = service_names_by_category[i]
---
#code: |
  #if i >= HSCqualifying_services.number() or selected_services_test_collect.has_been_gathered():
    #selected_services_test_collect.there_is_another = False
  #else:
  #selected_services_test_collect.there_is_another = True
---
question: |
  Are there any more fruit?
yesno: selected_services_test_collect.there_is_another
---
#code: |
#  selected_services_test_collect.there_is_another = True
---


# no filtering, hard coded categories
question: Here them services
subquestion: |
  sdkfjlsdkjfa;lskdfja;lsdkjf;alsekdf
  
fields:
  - note: |
      ## Key Social Services:
  - no label: selected_services_key
    datatype: checkboxes
    code: |
      qualifying_key
    none of the above: False
    required: False
  - note: |
      ## Health and Wellbeing Services:
  - no label: selected_services_health
    datatype: checkboxes
    code: |
      qualifying_health
    none of the above: False
    required: False
  - note: |
      ## Social and Community Services:
  - no label: selected_services_social
    datatype: checkboxes
    code: |
      HSCqualifying_services.get('Social and Community')
    none of the above: False
    required: False
  - note: |
      ## Advocacy Groups:
  - no label: selected_services_advocacy
    datatype: checkboxes
    code: |
      HSCqualifying_services.get('Advocacy Groups')
    none of the above: False
    required: False
  - note: |
      ## Other Services:
  - no label: selected_services_other
    datatype: checkboxes
    code: |
      HSCqualifying_services.get('Other')
    none of the above: False
    required: False
  
---
# this is for the hard coded category list, making sure nothing is displayed if there are no services for that category
generic object: DAList
code: | 
  x.there_are_any = False
---
template: service_checkbox
subject: |
  **service name**
content: |
  service deets
---
#code: |
#  qualifying_key = []
#  if HSCqualifying_services.get('Key Service').there_are_any:
#    for service in HSCqualifying_services.get('Key Service'):
      #info_display = "
#      qualifying_key.append(service_checkbox.subject + "[BR]" + service_checkbox.content)
      #qualifying_key.append(service['Service Name'] + "[BR]" + service['Service Name'])
  #qualifying_key.gathered = True
---
code: |
  qualifying_health = []
  if HSCqualifying_services.get('Health and Wellbeing').there_are_any:
    for service in HSCqualifying_services.get('Health and Wellbeing'):
      qualifying_health.append(service['Service Name'])
---
# generic 
# returns a list of service names and descriptions 
code: |
  qualifying_key = []
  if HSCqualifying_services.get('Key Service').there_are_any:
    for service in HSCqualifying_services.get('Key Service'):
      qualifying_key.append({service['Service Name']: service['Service Name'] + "[BR]" + service['Service Name']})
---



# doesn't filter, just lists each by category
question: Here them services
subquestion: |
  blahblahblah
  
fields:
  - no label: selected_services_nonfiltered
    datatype: checkboxes
    code: |
      HSCtemplates
---
code: |
  HSCcategorised = HSCqualifying_services['Health and Wellbeing']
  #HSCcategorised = []
  #for category in categories.true_values():
  #  HSCcategorised = HSCqualifying_services[category]
---
# filters by categories (not hard-coded but also not working)
question: "something"
subquestion: |
  Something something them's the services
fields:
  - no label: categories
    datatype: checkboxes
    code: |
      HSCqualifying_services.keys()
  - no label: selected_services
    datatype: checkboxes
    code: |
      HSCqualifying_services
      
      
      
---
# filters by categories (categories hard-coded)
mandatory: False
question: "we testin"
subquestion: |
  Some spiel about the service listing.
fields:
  - no label: categories_to_show
    datatype: checkboxes
    choices:
      - Health and Wellbeing: show_health
      - Key Services: show_key
    # this can pre easily be the keys of any arbitrary dictionary item
      #HSClist_of_dicts_test
  - note: |
      ## Health and Wellbeing:
      can include other shit here
      and can only show if it meets the same criteria below
  - no label: selected_services
    datatype: checkboxes
    code: |
      HSCqualifying_services['Health and Wellbeing']
    show if:
      variable: categories_to_show['show_health']
      is: True
    
---
# TESTING BLOCK FOR DISPLAYING SERVICES AS CHECKBOXES
# so, using a dictionary as a choice will just list all it's keys
# can use a list of objects for users to select from
# but then will print dictionaries weird, may want to extract a list
# of service names from our list first and use that as the choices?
mandatory: False
question: "we testin again"
subquestion: |
  Some spiel about the service listing.
fields:
  - no label: selected_services
    datatype: checkboxes
    code: |
      HSClist_of_dicts_test
      
---
template: HAA_agencylist[i]['display_record']
content: |
  <span class="service-name">
  **[${ HAA_agencylist[i].item('service') }]( ${ HAA_agencylist[i].item('website') })** 
  </span>
  
  ${ HAA_agencylist[i].item('address') } [BR]
  ${ HAA_agencylist[i].item('email') } [BR]
  ${ HAA_agencylist[i].item('phone') } [BR]
  ${ HAA_agencylist[i].item('blurb') } [BR]


---
objects:
  - HSCqualifying_services: DADict.using(auto_gather=False, there_are_any=True, object_type=DAList)
  - eligibility_test: DAList
 # - council_services: DAList
---
# Go through the list that corresponds to the selected council.
# extract all the qualifying services and put them in a list
# corresponding to their category.
# These lists are what will be displayed in the display_output file
code: |
  # retrieve the list of service dictionaries available in the selected council area
  #council_services = HSCdata.get(HSCcouncil)
  #council_services = HSClist_of_dicts_test
  #council_services = csv_data[HSCcouncil]
  HSCqualifying_services.clear()
  
  # if there are services for the given council area
  #if council_services != None:
  if HSCdata.defined(HSCcouncil):
    # retrieve the list of services at the given council
    council_services = HSCdata.get(HSCcouncil)
    #i = -1
    it = 0
    # go through the returned list and extract all eligible services
    for service in council_services:
      # for each service, run the appropriate eligibility tests
      #i += 1
      #if council_services[it]['age_test']:
      #if (service['age_test']) and (service['gender_test']) and (service['family_test']) and (service['concessions_test']) and (service['others_test']):
      if (int(service['Min Age']) <= HSCage) and (int(service['Max Age']) >= HSCage):
      #if eligibility_test[it]:#service['age_test']:#service.item('age_test'):
      # test for gender
      # test for age
      # test for family situation
      # test for concessions
      # test for other factors
    
        # if it passes them all, then add it to it's corresponding category list
        temp_list = HSCqualifying_services.get(service.get('Category'))
        temp_list.append(service)
        HSCqualifying_services[service.get('Category')] = temp_list
        #HSCqualifying_services[service['Category']].append(service)
            
      it += 1
    # finalise the categorised lists
    HSCqualifying_services.gathered = True
    for category in HSCqualifying_services:        # NECESSARY
      HSCqualifying_services[category].there_is_another = False
  else:
    # else, if there are no services at the given council area, return an empty dictionary
    HSCqualifying_services = {}
    HSCqualifying_services.gathered = True
    #HSCqualifying_services.there_are_any = False
---
# test for age eligibility
generic object: DAList
code: |
  x[i]['age_test'] = (int(x[i]['Min Age']) <= HSCage) and (int(x[i]['Max Age']) >= HSCage)
---
code: |
  list_temp = HSCdata.get(HSCcouncil)#[i]['age_test'] = True
  list_temp[i]['age_test'] = True
---
generic object: DAList
code: |
  # clients are eligible for services that cater for their gender
  x[i]['gender_test'] = (x[i][HSCgender] == 'TRUE')
---
generic object: DAList
code: |
  x[i]['family_test'] = (x[i][HSCfamily] == 'TRUE')
---
generic object: DAList
code: |
  # return true if the services pertain to the client's concessions
  x[i]['concessions_test'] = True
  for concession in HSCconcessions.true_values():
    if x[i][concession] != 'TRUE':
      x[i]['concessions_test'] = False
---
generic object: DAList
code: |
  # return true if the services pertain to the client's characteristics
  x[i]['others_test'] = True
  for factor in HSCother.true_values():
    if x[i][factor] != 'TRUE':
      x[i]['others_test'] = False
---
code: |
  test_result = False
  council_services = HSCdata.get(HSCcouncil)
  if council_services[i]['Category'] == 'Health and Wellbeing':
  # test for age
    eligibility_test[i] = True
  eligibility_test[i] = False
---
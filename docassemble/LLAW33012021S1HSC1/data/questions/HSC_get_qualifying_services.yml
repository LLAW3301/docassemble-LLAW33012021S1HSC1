---
objects:
  - HSCqualifying_services: DADict.using(auto_gather=False, there_are_any=True, object_type=DAList)
  - eligibility_test: DAList
 # - council_services: DAList
---
# Go through the list that corresponds to the selected council.
# extract all the qualifying services and put them in a list
# corresponding to their category.
# These lists are what will be displayed in the display_output file
code: |
  # retrieve the list of service dictionaries available in the selected council area
  #council_services = HSCdata.get(HSCcouncil)
  #council_services = HSClist_of_dicts_test
  council_services = csv_data[HSCcouncil]
  HSCqualifying_services.clear()
  
  # if there are services for the given council area
  if council_services != None:
    #i = -1
    it = 0
    # go through the returned list and extract all eligible services
    for service in council_services:
      # for each service, run the appropriate eligibility tests
      #i += 1
      #if council_services[it]['age_test']:
      if (service['age_test']) and (service['gender_test']) and (service['family_test']) and (service['concessions_test']) and (service['others_test']):
      #if eligibility_test[it]:#service['age_test']:#service.item('age_test'):
      # test for gender
      # test for age
      # test for family situation
      # test for concessions
      # test for other factors
    
      # if it passes them all, then add it to it's corresponding category list
        HSCqualifying_services[service['Category']].append(service)
            
      it += 1
    # finalise the categorised lists
    HSCqualifying_services.gathered = True
    for category in HSCqualifying_services:
      HSCqualifying_services[category].there_is_another = False
  else:
    # else, if there are no services at the given council area, return an empty dictionary
    HSCqualifying_services = {}
    HSCqualifying_services.there_are_any = False
---
# test for age eligibility
generic object: DAList
code: |
  x[i]['age_test'] = (int(x[i]['Min Age']) <= HSCage) and (int(x[i]['Max Age']) >= HSCage)
---
generic object: DAList
code: |
  # clients are eligible for services that cater for their gender
  x[i]['gender_test'] = (x[i][HSCgender] == 'TRUE')
---
generic object: DAList
code: |
  x[i]['family_test'] = (x[i][HSCfamily] == 'TRUE')
---
generic object: DAList
code: |
  # return true if the services pertain to the client's concessions
  x[i]['concessions_test'] = True
  for concession in HSCconcessions.true_values():
    if x[i][concession] != 'TRUE':
      x[i]['concessions_test'] = False
---
generic object: DAList
code: |
  # return true if the services pertain to the client's characteristics
  x[i]['others_test'] = True
  for factor in HSCother.true_values():
    if x[i][factor] != 'TRUE':
      x[i]['others_test'] = False
---
code: |
  test_result = False
  council_services = HSCdata.get(HSCcouncil)
  if council_services[i]['Category'] == 'Health and Wellbeing':
  # test for age
    eligibility_test[i] = True
  eligibility_test[i] = False
---
# This code block adds an agency to the list of qualifying agencies
# if all the qualification critera are met.  Each test is laid
# out in a code block under this first code block
code: |
  HAAqualifying_agencies.clear()
  MJFi = 0
  for HAAagency in HAA_agencylist:
    # Add a qualifying agency if it meets these requirements:
    # - age
    # - gender
    # - Location
    # - Aboriginal or Torres Strait Islander status
    # - Accommodation for single or family
    # OR
    # - manages pets 
    if ( HAAagency['pets_test'] ) or ( HAAagency['age_test'] and HAAagency['gender_test'] and HAAagency['location_test'] and HAAagency['atsi_test'] and HAAagency['families_test'] ):
      # Append to qualifying agencies
      HAAqualifying_agencies.append(HAAagency)
      MJFi += 1
      if MJFi == 300:
        break
  HAAqualifying_agencies.gathered = True
---
#
# All the tests go under here
#
---
# Test for age.  Make sure age falls within max and min
# age for an agency
code: |
  if HAA_agencylist[i].item('min_age') <= HAAage <= HAA_agencylist[i].item('max_age'):
    HAA_agencylist[i]['age_test'] = True
  else:
    HAA_agencylist[i]['age_test'] = False
---
# Test for gender
# If the user identifies as 'other' then this test is always true,
# otherwise, this test is true if the selected gender matches the gender(s)
# specified in the record
code: |
  if HAAgender == 'other':
    HAA_agencylist[i]['gender_test'] = True
  elif HAA_agencylist[i].item('gender').item(HAAgender):
    HAA_agencylist[i]['gender_test'] = True
  else:
    # We don't have a match and we're not 'other' so
    # this test fails
    HAA_agencylist[i]['gender_test'] = False
---
# Test for location.
# The can answer that they either:
# - live in the metro area
# - do not live in the metro area
# - are not sure
# If the user isn't sure then we include all locations, otherwise
# we include only the selected location
code: |
  if HAAmetro == None:
    # User isn't sure, so set test to true
    HAA_agencylist[i]['location_test'] = True
  elif HAAmetro == HAA_agencylist[i].item('metro'):
    HAA_agencylist[i]['location_test'] = True
  else:
    HAA_agencylist[i]['location_test'] = False
---
# Test for Aboriginal and Torres Strait Islander
# status.
# If the user identifies as ATSI then the test is always
# true.  If the user does not identify as ATSI then the test
# is true only if the agency *excludes* ASTI people from
# its client list
code: |
  if HAAabor:
    # Test is always true if person identifies as ATSI
    HAA_agencylist[i]['atsi_test'] = True
  elif HAAabor == False and HAA_agencylist[i].item('indigenous') == False:
    HAA_agencylist[i]['atsi_test'] = True
  else:
    HAA_agencylist[i]['atsi_test'] = False
---
# Match family status
code: |
  if HAAfamily == 'singles' and HAA_agencylist[i].item('families').item('singles'):
    HAA_agencylist[i]['families_test'] = True
  elif HAAfamily == 'family' and HAA_agencylist[i].item('families').item('family'):
    HAA_agencylist[i]['families_test'] = True
  else:
    HAA_agencylist[i]['families_test'] = False
---
# Match pets status.
# We only set to true if the user has pets and
# the agency handles pets.  Otherwise set to false
code: |
  if HAApets and HAA_agencylist[i].item('pets'):
    HAA_agencylist[i]['pets_test'] = True
  else:
    HAA_agencylist[i]['pets_test'] = False
---
# Test for gender-specific services.  Gender-specific services
# are services that cater ONLY for one gender (male or female).
# In order to determine this we need to ensure that the agency
# only has HAAgender set to true and the other gender(s) either
# doesn't exist or is false.
code: |
  # We assume there must be a gender key
  # We iterate through each of the genders in the gender key
  # We test that:
  # - the gender that matches HAAgender is true; and
  # - any other genders are false
  # If so, we set gender_specific to true, otherwise we
  # set it to false.
  #
  # This is actually pretty complex to do.  We need to iterate
  # over each gender, run each test above and store each individual
  # test result.  Then we need to look over all the results to make
  # sure they're all OK. 
  #
  # We'll do this by keeping a test score.  Each time a test passes
  # we'll add 1 to the score.  If all the tests pass, then our score
  # will match the number of elements in the list (as we've tested
  # each one and it's passed).
  # Store the genders in a temporary variable (so it's easier to read)
  MJFgenders = HAA_agencylist[i].item('gender')
  
  # Set the score to 0
  MJFtest_score = 0
  for MJFgender_key in MJFgenders.keys():
    if MJFgender_key == HAAgender and MJFgenders[MJFgender_key]:
      # Increment the score if the gender matches HAAgender and
      # that gender is set to true in this record.
      MJFtest_score = MJFtest_score + 1
    elif MJFgender_key != HAAgender and not MJFgenders[MJFgender_key]:
      # Increment the score if the gender doesn't match HAAgender and
      # that gender is set to false in this record
      MJFtest_score = MJFtest_score + 1
    else:
      # The above two cases are the only times we need to increment
      # the test score.  For any other situation we leave the score
      # as it is ie: we do nothing
      pass
  # Now we've been through the genders, if the score and the length
  # of the list match up we have a gender-specific service
  # Otherwise, we don't.
  # We only run the test if MJFgenders contained anything at all
  # (ie: it had at least one gender specified).  If the length of
  # MJFgenders is 0, then we return false.
  if len(MJFgenders) == 0:
    HAA_agencylist[i]['gender_specific'] = False
    gender_specific = False
  elif MJFtest_score == len(MJFgenders):
    # This means all tests were passed
    HAA_agencylist[i]['gender_specific'] = True
    gender_specific = True
  else:
    # This means some tests failed.
    HAA_agencylist[i]['gender_specific'] = False
    gender_specific = False
---
# Test for family-specific services.  Family-specific services
# are services that cater ONLY for either singles or people
# with children.  This code is heavily based on the gender-specific
# code above so I have not commented this code.
code: |
  MJFfamilies = HAA_agencylist[i].item('families')
  # Set the score to 0
  MJFtest_score = 0
  for MJFfamily_key in MJFfamilies.keys():
    if MJFfamily_key == HAAfamily and MJFfamilies[MJFfamily_key]:
      MJFtest_score = MJFtest_score + 1
    elif MJFfamily_key != HAAfamily and MJFfamilies[MJFfamily_key] == False:
      MJFtest_score = MJFtest_score + 1
    else:
      pass
  
  if len(MJFfamilies) == 0:
    HAA_agencylist[i]['family_specific'] = False
    family_specific = False
  elif MJFtest_score == len(MJFfamilies):
    HAA_agencylist[i]['family_specific'] = True
    family_specific = True
  else:
    HAA_agencylist[i]['family_specific'] = False
    family_specific = False
---